""""""""""""""" HELPER
" source file only when it exists
function! s:source (path)
  if filereadable(expand(a:path))
    exec "source" expand(a:path)
  endif
endfunction

function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction

" set foldtext=NeatFoldText()
set foldtext=Foldy()

function! Foldy()
  let linelen = &tw ? &tw : 80
  let marker  = strpart(&fmr, 0, stridx(&fmr, ',')) . '\d*'
  let range   = foldclosedend(v:foldstart) - foldclosed(v:foldstart) + 1

  let left    = substitute(getline(v:foldstart), marker, '', '')
  let leftlen = len(left)

  let right    = range . ' [' . v:foldlevel . ']'
  let rightlen = len(right)

  let tmp    = strpart(left, 0, linelen - rightlen)
  let tmplen = len(tmp)

  if leftlen > len(tmp)
    let left    = strpart(tmp, 0, tmplen - 4) . '... '
    let leftlen = tmplen
  endif

  let fill = repeat(' ', linelen - (leftlen + rightlen))

  return left . fill . right . repeat(' ', 100)
endfunction

function! NeatFoldText()
  let line = substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g')
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = ' ' . printf("%s", lines_count . ' lines') . ' '
  let foldchar = matchstr(&fillchars, 'fold:\zs.')
  let foldchar = ' '
  let foldtextstart = strpart('+' . repeat('>', v:foldlevel*2) . ' ' . line . ' <<<', 0, (winwidth(0)*2)/3) . ' #'
  let foldtextend = lines_count_text
  let foldtextlength = strlen(foldtextstart . foldtextend) + &foldcolumn + 3
  return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction


""""""""""""""" IMPORT
call s:source("~/.vimrc.bundles")

""""""""""""""" CONTROL
" Leader
let mapleader = " "

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

inoremap jk <esc>

" spelling
map <leader>sn ]s
map <leader>sN [s
map <leader>sa zg
map <leader>s? z=

" Index ctags from any project, including those outside Rails
map <Leader>ct :!ctags -R .<CR>

" RSpec.vim mappings
map <Leader>tf :call RunCurrentSpecFile()<CR>
map <Leader>tn :call RunNearestSpec()<CR>
map <Leader>tl :call RunLastSpec()<CR>
map <Leader>ta :call RunAllSpecs()<CR>

map 0 ^
map gy "+y

" vnoremap <silent><C-c> "zy:call system("pbcopy",@z)<CR>

" Expand `%%` to the path of directory of the current file
cnoremap %% <c-r>=expand("%:h")<cr>/

map <Leader>p :set paste!<cr>

map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>



""""""""""""""" VISUAL
set hls
set backspace=2   " Backspace deletes like most programs in insert mode
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set laststatus=2  " Always display the status line
set cursorline

set lazyredraw

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

" Numbers
set relativenumber
set numberwidth=1

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" syntax on
" set t_Co=256
" set background=dark

" disable for base16
" colorscheme molokai
colorscheme base16-default-dark
let g:airline_theme="base16_default_dark"

hi Folded cterm=bold


""""""""""""""" SETTING
set autowrite     " Automatically :write before running commands
set nobackup
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set history=5000
set incsearch     " do incremental searching
set smartcase
set noerrorbells
set nojoinspaces
set whichwrap=h,l
set display=lastline,uhex
set updatetime=100

set wildmode=list:longest,list:full
" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
" Add Shift+Tab map for tab complete in insert mode
inoremap <S-Tab> <c-n>
" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Autocomplete with dictionary words when spell check is on
set complete+=kspell
" Always use vertical diffs
set diffopt+=vertical
if executable('zsh')
  set shell=zsh
endif

" Set spellfile to location that is guaranteed to exist, can be symlinked to
" Dropbox or kept in Git and managed outside of thoughtbot/dotfiles using rcm.
set spellfile=$HOME/.vim-spell-en.utf-8.add

set foldmethod=indent
set foldlevel=100
set scrolloff=3

set undofile
set undodir=~/.vimundo

set mouse=a


""""""""""""""" FILETYPE
filetype plugin indent on
""""" Markdown
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd FileType markdown setlocal spell
autocmd BufRead,BufNewFile *.md setlocal textwidth=80

""""" Git
" Automatically wrap at 72 characters and spell check git commit messages
autocmd FileType gitcommit setlocal textwidth=72
autocmd FileType gitcommit setlocal spell

""""" WEB
" Allow stylesheets to autocomplete hyphenated words
autocmd FileType css,scss,sass setlocal iskeyword+=-

""""" Go
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>t  <Plug>(go-test)
autocmd FileType go nmap <leader>w :GoAlternate<CR>
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=2 shiftwidth=2


""""""""""""""" PLUGIN
""""" NerdTree
let NERDTreeShowHidden=1
""""" CtrlP
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" always use current directory
let g:ctrlp_working_path_mode=0

""""" Ag
let g:ag_working_path_mode="r"
let g:rspec_command = "!bundle exec rspec {spec}"

let g:rspec_command = "!bundle exec rspec {spec}"

""""" Syntastic
" configure syntastic syntax checking to check on open as well as save
let g:syntastic_check_on_open=1
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:syntastic_eruby_ruby_quiet_messages =
      \ {"regex": "possibly useless use of a variable in void context"}

""""" vim-go

" use goimports for better formatting
let g:go_fmt_command = "goimports"
" default to use camelcase
let g:go_addtags_transform = "camelcase"
let g:go_highlight_types = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_metalinter_autosave = 1
" show function signature on status bar
let g:go_auto_type_info = 1
let g:go_auto_sameids = 1


""""""""""""""" THOUGHTBOT TODO ???
" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
        \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal g`\"" |
        \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile Appraisals set filetype=ruby

augroup END

if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor
endif


" Exclude Javascript files in :Rtags via rails.vim due to warnings when parsing
let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

""""""""""""""" END
" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif

